{"ast":null,"code":"var _jsxFileName = \"/Users/alejandrohussein/Desktop/React/Section-21-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  // if(data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\n;\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/event');\n  if (!response.ok) {\n    // return {isError:true, message: 'Could not fetch events.' }\n    throw new Response(JSON.stringify({\n      message: 'cloud not fetch events',\n      status: 500\n    }));\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["/Users/alejandrohussein/Desktop/React/Section-21-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import EventsList from '../components/EventsList';\nimport { useLoaderData } from 'react-router-dom';\n\n\nexport default function EventsPage() {\n  const data = useLoaderData()\n  const events = data.events\n  // if(data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  return <EventsList events={events} />\n};\n\n\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/event');\n\n  if (!response.ok) {\n    // return {isError:true, message: 'Could not fetch events.' }\n    throw new Response(JSON.stringify({\n      message: 'cloud not fetch events',\n      status: 500,\n    }))\n  } else {\n    return response\n  }\n};"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAMC,IAAI,GAAGL,aAAa,CAAC,CAAC;EAC5B,MAAMM,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B;EACA;EACA;EACA,oBAAOJ,OAAA,CAACH,UAAU;IAACO,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACN,EAAA,CAPuBD,UAAU;EAAA,QACnBH,aAAa;AAAA;AAAAW,EAAA,GADJR,UAAU;AAOjC;AAGD,OAAO,MAAMS,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;EAE3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAChCC,OAAO,EAAE,wBAAwB;MACjCC,MAAM,EAAE;IACV,CAAC,CAAC,CAAC;EACL,CAAC,MAAM;IACL,OAAOP,QAAQ;EACjB;AACF,CAAC;AAAC,IAAAF,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}